docker container run --name mydeb -it debian 
# set name a container / run a dockerfile

docker container ls -a
# list all container created

docker container start -ai mydeb
# acess to container 

touch name-file-to-create.txt
# create a new file inside the container

docker container run -p 8080:80 -v %cd%/html:/usr/share/nginx/html nginx
# call a page/folder when open to container - use %cd% to windows and $(pwd) to linux
# It's important, you must set this code the current folder that you wants use

docker container run -d --name ex-daemon-basic -p 8080:80 -v %cd%/html:/usr/share/nginx/html nginx
# run docker in background

docker container start <name>
# start container

docker container stop <name>
# stop container

docker container rm <name>
# remove container

docker image build -t ex-simple-build .
# create build image

docker image ls
#list images created

docker container run -p 8081:80 ex-simple-build
# create container using port 8081 about custom image 

docker image tag ex-simple-build petronioamaral:1.0
# create tag to image

docker network ls
# list all networks

docker network create --driver bridge rede_nova
# create a new network as bridge

docker network connect bridge container3
# connect container3 in the network bridge

docker container exec -it container3 ifconfig
# check what networks this container3 it is

docker-compose up
# up a yml and create container

docker-compose up -d
# up a yml and create container in mode daemon

docker-compose exec db psql -U postgres -c '\l'
# execute the command \l in database db with user postgres

docker-compose exec db psql -U postgres -f /scripts/check.sql
# execute database db -f in file check.sql

docker-compose logs -f -t
# check the logs

docker build <URL GIT>
# build from a URL GIT


#Enviar imagem para dockerhub
docker image tag <NAME IMAGE> <NAME DOCKERHUB>/<NEW TAG:VERSION>

docker login --username=petronioamaral

# enivar imagem dockerhub
docker image push <TAG IMAGE>


# cria uma tag da imagem + enviar imagem para outro servidor
docker tag homog 642017768485.dkr.ecr.us-east-1.amazonaws.com/homog
docker push homog 642017768485.dkr.ecr.us-east-1.amazonaws.com/homog

# transferir imagem docker para outro servidor
docker save homog | ssh -C ec2-user@54.92.192.128 docker load


# salvar sql do postgres 
docker exec -t fac2a9e0ca11 pg_dumpall -c -U postgres > dump_`date +%d-%m-%Y"_"%H_%M_%S`.sql

##################### AWS ####################

# connect aws
 ssh -i petroniolopes.pem ec2-user@ec2-54-92-192-128.compute-1.amazonaws.com

# ver todos os comandos
docker-machine-h

#criar uma maquina virtual
docker-machine create --driver amazonec2 aws01

#copiar comandos / liberar comandos
docker-machine env aws01

# subir arquivos para container em modo daemon
docker-compose up -d

# sair do docker machine remoto
eval $(docker-machine env -u)

##################### OUTROS COMANDOS ####################

# logar em um outro servidro com chave pem
ssh -v -i petroniolopes.pem ec2-user@54.92.192.128

# SSH - enviar arquivo para outro servidor
scp -i pub.pem src/homog.tar ubuntu@3.80.18.58:~/.
scp -i petroniolopes.pem /src/homog.tar ec2-user@54.92.192.128:/ 



##################### ENVIAR CONTAINER DE UM SERVIDOR PARA A AWS ####################

$ aws --version
aws-cli/1.9.17 Python/2.7.6 Linux/3.16.0-38-generic botocore/1.3.17
$ docker --version
Docker version 1.9.1, build a34a1d5

aws ecr get-authorization-token --region us-east-1 --output text \
    --query authorizationData[].authorizationToken | base64 -d | cut -d: -f2

docker login -u AWS https://############.dkr.ecr.us-east-1.amazonaws.com/
password: <paste the very long password from above>
email: <I left this blank>

docker tag test:latest ############.dkr.ecr.us-east-1.amazonaws.com/test:latest
docker push ############.dkr.ecr.us-east-1.amazonaws.com/test:latest
The push refers to a repository [910732017890.dkr.ecr.us-east-1.amazonaws.com/test] (len: 1)
d5122f58a2e1: Pushed 
7bddbca3b908: Pushed 
latest: digest: sha256:bc0b521fd398bd1a2ef58a289dcb910334608723fd570e7bddb36eacd0060363 size: 4378
